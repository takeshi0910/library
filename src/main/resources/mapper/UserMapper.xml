<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.takeshi.library.mapper.UserMapper">
    <resultMap id="UserResultMap" type="com.takeshi.library.entity.UserEntity">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="password" column="password"/>
        <result property="email" column="email"/>
        <result property="role" column="role"/>
        <result property="deleted" column="deleted"/>
    </resultMap>

    <!-- 一覧取得（削除されてないユーザーのみ） -->
    <select id="findAll" resultMap="UserResultMap">
        SELECT id, name, email, role
        FROM users
        WHERE deleted = false
        ORDER BY id
    </select>

    <!-- IDで取得 -->
    <select id="findById" resultMap="UserResultMap" parameterType="Integer">
        SELECT id, name, password, email, role, deleted
        FROM users
        WHERE id = #{id}
    </select>

    <!-- メールアドレスで取得（ログインなどに使用） -->
    <select id="findByEmail" resultMap="UserResultMap" parameterType="String">
        SELECT id, name, password, email, role, deleted
        FROM users
        WHERE email = #{email} AND deleted = false
    </select>

    <!-- メールアドレスの重複チェック（自分自身は除く) -->
    <select id="existsByEmail" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM users
        WHERE email = #{email}
        <if test="id != null">
            AND id != #{id}
        </if>
    </select>

    <!-- 登録処理 -->
    <insert id="insert" parameterType="com.takeshi.library.entity.UserEntity">
        INSERT INTO users (name, password, email, role, deleted)
        VALUES (#{name}, #{password}, #{email}, #{role}, FALSE)
    </insert>

    <!-- 更新処理 -->
    <update id="update" parameterType="com.takeshi.library.entity.UserEntity">
        UPDATE users
        <set>
            name = #{name},
            <if test="password != null">
                password = #{password},
            </if>
            email = #{email},
            role = #{role},
            deleted = #{deleted}
            WHERE id = #{id}
        </set>
    </update>

    <!-- 論理削除 -->
    <update id="softDelete" parameterType="Integer">
        UPDATE users SET deleted = true WHERE id = #{id}
    </update>

</mapper>